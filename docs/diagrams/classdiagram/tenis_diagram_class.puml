@startuml
skin rose

class tenis.Model.Set {
    - List<Game> games
    - Map<Player, Integer> wonGamesByPlayers
    - ServeTurn serveTurn
    - GameFactory gameFactory
    + Set(List<Player>, ServeTurn)
    + Map<Player, Integer> getWonGamesByPlayers()
    + void playerPoint(Player)
    + void playerGame(Player)
    + void newGame()
    + boolean setFinished()
    + Game getActualGame()
}

class tenis.Controller.RefereeController {
    - List<Referee> referees
    - boolean refereeLogged
    + RefereeController()
    + void addReferee(Referee)
    + List<Referee> getReferees()
    + boolean checkRefereeCredentials(String, String)
    + boolean getRefereeLogged()
    + void setRefereeLogged(boolean)
}

class tenis.Model.StandardGame {
    + StandardGame(List<Player>)
    + void playerPoint(Player)
    - boolean isDeuce(int, int)
    - void handleDeuce(Player, int)
    + boolean shouldSwitchServer()
    + String getActualGamePointsByPlayer(Player)
}

class tenis.View.ShowMatchHistoryCommand {
    - MatchController matchController
    - ConsolePrint consolePrint
    + ShowMatchHistoryCommand(MatchController)
    - void printMatchDetails(Match)
    - String formatPlayers(List<Player>)
    - void printFinalScores(Map<Player, Integer>)
    - void printMatchWinner(Optional<Player>)
}

class tenis.Controller.PlayerController {
    - List<Player> players
    + PlayerController()
    + void addPlayer(String)
    + List<Player> getPlayers()
    + Optional<Player> getPlayerById(int)
}

class tenis.View.ReadPlayersCommand {
    - PlayerController playerController
    - ConsolePrint consolePrint
    + ReadPlayersCommand(PlayerController)
}

class tenis.View.MatchRenderer {
    - List<Set> sets
    - ConsolePrint consolePrint
    + MatchRenderer()
    + void displayPoint(Player)
    + void showMatch(Match)
    - void displayPlayerStats(Match, Player, int)
    + void showError(String)
}

class tenis.View.CreateMatchCommand {
    + {static} String CREATE_MATCH_OPTION
    - MatchController matchController
    - ConsolePrint consolePrint
    - PlayerController playerController
    + CreateMatchCommand(MatchController, PlayerController)
    - int getNumberOfSets()
    - List<Player> collectPlayers()
}

class tenis.View.CreateRefereeCommand {
    - RefereeController refereeController
    - ConsolePrint consolePrint
    + CreateRefereeCommand(RefereeController)
}

class tenis.Model.Match {
    - int id
    - List<Set> sets
    - Map<Player, Integer> wonSetsByPlayer
    - int setNumber
    - ServeTurn serveTurn
    + Match(int, List<Player>, int)
    + void playerPoint(Player)
    + void playerSet(Player)
    + void newSet()
    + boolean hasFinished()
    + List<Player> getPlayers()
    + List<Set> getSets()
    + int getSetNumber()
    + String getPointsByPlayer(Player)
    + Player getServer()
    + Map<Player, Integer> getFinalScores()
    + Optional<Player> getMatchWinner()
    + int getId()
}

class tenis.View.Menu {
    + {static} String OPTION_NOT_VALID
    + {static} String TENIS_MATCH_TITLE
    + {static} String SELECT_OPTION
    - Map<Integer, MenuCommand> commands
    - ConsolePrint consolePrint
    + Menu()
    - Map<Integer, MenuCommand> initializeCommands()
    + void createMenu()
    - void displayMenuOptions()
    - void executeCommand(MenuCommand)
}

class tenis.Model.ServeTurn {
    - Player server
    - Player receiver
    + ServeTurn(List<Player>)
    + void switchTurn()
    + Player getServer()
}

class tenis.Model.GameFactory {
    + Game createGame(Map<Player, Integer>)
    - boolean isTieBreakCondition(Map<Player, Integer>)
}

class tenis.View.CreatePlayerCommand {
    + {static} String CREATE_PLAYERS_OPTIONS
    - PlayerController playerController
    - ConsolePrint consolePrint
    + CreatePlayerCommand(PlayerController)
}

class tenis.Model.Player {
    - int id
    - String name
    + Player(int, String)
    + String getName()
    + int getId()
    + String toString()
}

class tenis.View.LogRefereeCommand {
    - RefereeController refereeController
    - ConsolePrint consolePrint
    + LogRefereeCommand(RefereeController)
}

interface tenis.View.MenuCommand {
    ~ void showCommand()
    ~ void execute()
}

class tenis.Controller.MatchController {
    - {static} int MATCH_DISPLAY_DELAY
    - List<Match> matches
    - MatchRenderer matchRenderer
    - MatchGenerator matchGenerator
    + MatchController(MatchRenderer)
    + void startMatch(int)
    + int addMatch(int, List<Player>)
    - Match getMatchById(int)
    - void playMatch(Match)
    - void processPoint(Match)
    + List<Match> getMatches()
}

class tenis.util.ConsolePrint {
    - {static} ConsolePrint console
    - Scanner scanner
    - ConsolePrint()
    + {static} ConsolePrint getInstance()
    + int nextInt()
    + String nextLine()
    + void println()
    + void println(String)
    + void print(String)
    + void println(List<T>)
}

class tenis.Model.TieBreak {
    + TieBreak(List<Player>)
    + boolean shouldSwitchServer()
    + String getActualGamePointsByPlayer(Player)
}

class tenis.Controller.MatchGenerator {
    - Random rand
    + MatchGenerator()
    + Player generatePointWinner(List<Player>)
}

class tenis.Model.Referee {
    - String name
    - String password
    + Referee(String, String)
    + String getName()
    + void setName(String)
    + String getPassword()
    + void setPassword(String)
}

abstract class tenis.Model.Game {
    # Map<Player, Integer> wonPointsByPlayers
    # int pointsToWin
    + Game(List<Player>)
    + {abstract} String getActualGamePointsByPlayer(Player)
    + {abstract} boolean shouldSwitchServer()
    + void playerPoint(Player)
    + Player getOpponent(Player)
    + int getPointsDiff()
    + boolean gameFinished()
    + void setPointsToWin(int)
}

tenis.Model.Game <|-- tenis.Model.StandardGame
tenis.View.MenuCommand <|.. tenis.View.ShowMatchHistoryCommand
tenis.View.MenuCommand <|.. tenis.View.ReadPlayersCommand
tenis.View.MenuCommand <|.. tenis.View.CreateMatchCommand
tenis.View.MenuCommand <|.. tenis.View.CreateRefereeCommand
tenis.View.MenuCommand <|.. tenis.View.CreatePlayerCommand
tenis.View.MenuCommand <|.. tenis.View.LogRefereeCommand
tenis.Model.Game <|-- tenis.Model.TieBreak

tenis.Model.Match  o--> tenis.Model.Set
tenis.Model.Set o--> tenis.Model.Game
tenis.Model.Set "1" *--> "1" tenis.Model.GameFactory
tenis.Controller.PlayerController o--> tenis.Model.Player
tenis.Controller.RefereeController o-->  tenis.Model.Referee
tenis.View.Menu  o-->  tenis.View.MenuCommand
tenis.Model.Set "1" o--> "1" tenis.Model.ServeTurn
tenis.Model.GameFactory "1" o--> "1" tenis.Model.TieBreak
tenis.View.MatchRenderer "1" o--> "1" tenis.Model.Match
tenis.Controller.MatchController *-->  tenis.Model.Match
tenis.Controller.MatchController "1" o--> "1" tenis.View.MatchRenderer
tenis.Controller.MatchController "1" *--> "1" tenis.Controller.MatchGenerator


@enduml
